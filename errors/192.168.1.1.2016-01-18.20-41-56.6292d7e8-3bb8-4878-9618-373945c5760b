(dp1
S'output'
p2
S"<type 'exceptions.TypeError'> expected a character buffer object"
p3
sS'layer'
p4
S'/home/www-data/web2py/applications/blink_led/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\nimport time\nimport subprocess\nimport shlex\nimport commands\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n#########################################################################\n\nBLINK_LED_SCRIPT = "/home/pi/programming/rpi2_blink_led/blink_led.py"\n\n# This one is a little dangerous hehe -- naming it \'__<url>\' makes it inacessible to anything but this script\ndef __system(cmd, block):\n    result = \'\'\n\n    if block:\n        try:\n            result = commands.getstatusoutput(cmd)[1]\n        except:\n            pass\n    else:\n        try:\n            args = shlex.split(args)\n            p = subprocess.Popen(args)\n            handle = open(\'/home/pi/args.out\', \'w\')\n            handle.write(args)\n            handle.close()\n        except Exception as err:\n            handle = open(\'/home/pi/err.out\', \'w\')\n            handle.write(err)\n            handle.close()\n            pass\n\n    return result\n\ndef index():\n    return dict(message="Hello WWW, my name is Nathan, today I\'ll be learning about the MVC pattern, py2web, and RPI 2 GPIO.")\n\ndef foo():\n    f = open("/home/pi/TEST_FILE.txt", \'w\')\n    f.write("bar!!!!\\n")\n    f.close()\n    return "Foo, bro!"\n\ndef button():\n    return HTML(BODY(CENTER(FORM(BUTTON("Cycle LEDs", _name="cycle_btn", _value="cycle"), _action="", _method="post"))))\n\ndef cycle():\n    # Attempt to get the rate parameter\n    rate = request.vars[\'rate\']\n    return __cycle(rate)\n\ndef __cycle(rate):\n    # This is defined as the default rate in blink_led.py\n    DEF_RATE = -1\n\n    if rate == None:\n        rate = DEF_RATE\n\n    __system("python {0} --cycle_rgb {1}".format(BLINK_LED_SCRIPT, rate), False)\n\n    if rate == DEF_RATE:\n        rate = "default rate"\n\n    return HTML(BODY(H1("Cycling LEDS @ rate: {0}!".format(rate))))\n\ndef read():\n    pin = request.vars[\'pin\']\n    return __read(pin)\n\ndef __read(pin):\n    # This is the default pin defined in blink_led.py.\n    DEF_PIN = 19\n\n    if pin == None:\n        pin = DEF_PIN\n\n    val = __system("python {0} --read_input {1}".format(BLINK_LED_SCRIPT, pin), True)\n    return val\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    also notice there is http://..../[app]/appadmin/manage/auth to allow administrator to manage users\n    """\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\nresponse._vars=response._caller(cycle)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/www-data/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/www-data/web2py/applications/blink_led/controllers/default.py", line 124, in <module>\n  File "/home/www-data/web2py/gluon/globals.py", line 412, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/www-data/web2py/applications/blink_led/controllers/default.py", line 57, in cycle\n    return __cycle(rate)\n  File "/home/www-data/web2py/applications/blink_led/controllers/default.py", line 66, in __cycle\n    __system("python {0} --cycle_rgb {1}".format(BLINK_LED_SCRIPT, rate), False)\n  File "/home/www-data/web2py/applications/blink_led/controllers/default.py", line 36, in __system\n    handle.write(err)\nTypeError: expected a character buffer object\n'
p11
s.